initial assignment of n is 1/3, setup of the stack is 8, and the teardown is 21 so we add
29 1/3 to everything

1. 29 1/3 (from the usual stuff) + 1/3 (assignment i= 0) + 101*1(typical latency for adding
1 to i because you need to know i first) + 102 * 1 (check i<=n in total takes 1 cycle and happens
102 times) + 101 * 2(cycle time for each of the jumps) + 101 * 4 (1 for the addition moving
2+3 to a register and 3 for moving that register to memory)
This is about 700 clock cycles.

2. 29 1/3 (from the usual stuff) + 1/3 (assignment i= 0) + 1 (check in total takes 1 cycle)
this is about 30 clock cycles

3. 29 1/3 (from the usual stuff) + 1/3 (assignment i= 0) 101*1(typical latency for adding
1 to i because you need to know i first) + 102 * 1 (check i<=n in total takes 1 cycle and happens
102 times) + (101 + 101 * 51) * 2(cycle time for each of the jumps throughout everything) + 101 * 1/3 
(assignment j = 0) + 101 * 51 * 1(typical latency for adding 1 to j because you need to know j first) + 101 * 52 * 1 
(check j<=n/2 in total takes 1 cycle and happens 52 times in each of the 101 second for loops)
+ 101 * 51 * (32.5 + 1) (treating the sin(x) as floating point division and storing x in memory)
THis is about 175000 clock cycles

4. 29 1/3 (from the usual stuff) + 1/3 (assignment i= 0) 101*1(typical latency for adding
1 to i because you need to know i first) + 102 * 1 (check i<=n in total takes 1 cycle and happens
102 times) + (101 + 101 * (50*101)) * 2(cycle time for each of the jumps throughout everything) + 101 * 1/3 
(assignment j = 0) + 101 * (50 * 101) * 1(typical latency for adding 1 to j because you need to know j first) + 101 * (50*101) * 1 
(check j<=n/2 in total takes 1 cycle and happens 52 times in each of the 101 second for loops)
+ 101 * (50*101) * (32.5 + 1) (treating the sin(x) as floating point division and storing x in memory)
This is about 17500000 clock cycles

5. 29 1/3 (from the usual stuff) + 1/3 (assignment i= 0) 101*1(typical latency for adding
1 to i because you need to know i first) + 102 * 1 (check i<=n in total takes 1 cycle and happens
102 times) + (101 + 101 * 51) * 2(cycle time for each of the jumps throughout everything) + 101 * 1/3 
(assignment j = 0) + 101 * 51 * 1(typical latency for adding 1 to j because you need to know j first) + 101 * 52 * 1 
(check j<=n/2 in total takes 1 cycle and happens 52 times in each of the 101 second for loops)
+ 101 * 51 * (32.5 + 6 + 6 +5 + 1) (treating the tan(x) as floating point division, multiplying twice
adding once and storing x in memory)
This is about 250000 clock cycles

6. 29 1/3 (from the usual stuff) + 1/3 (assignment i= 0) 101*1(typical latency for adding
1 to i because you need to know i first) + 102 * 1 (check i<=n in total takes 1 cycle and happens
102 times) + (101 + 101 * (25*51)) * 2(cycle time for each of the jumps throughout everything) + 101 * 1/3 
(assignment j = 0) + 101 * (50 * 101) * 1(typical latency for adding 1 to j because you need to know j first) + 101 * (25*51) * 1 
(check j<=n/2 in total takes 1 cycle and happens 52 times in each of the 101 second for loops)
+ 101 * (25*51) * (32.5 + 3 * 6 + 2 * 5) (treating the atan(x) as floating point division and storing x in memory)
+ 101 * 5(from the iterations of i)
This is about 6250000 clock cycles

7.  29 1/3 (from the usual stuff) + 1/3 (assignment i= 0) 101*1(typical latency for adding
1 to i because you need to know i first) + 102 * 1 (check i<=n in total takes 1 cycle and happens
102 times) + (101 + 101 * 51) * 2(cycle time for each of the jumps throughout everything) + 101 * 1/3 
(assignment j = 0) + 101 * 51 * 1(typical latency for adding 1 to j because you need to know j first) + 101 * 52 * 1 
(check j<=n/2 in total takes 1 cycle and happens 52 times in each of the 101 second for loops)
+ 101 * 51 * (5+1) (adding once and storing i in memory)
THis is about 50000 clock cycles.

8. 29 1/3 (from the usual stuff) + 1/3 (assignment i= 0) 101*1(typical latency for adding
1 to i because you need to know i first) + 102 * 1 (check i<=n in total takes 1 cycle and happens
102 times) + (101 + 101 * 51 + 101 * 51 * 26) * 2(cycle time for each of the jumps throughout everything) + 101 * 1/3 
(assignment j = 0) + 101 * 51 * 1(typical latency for adding 1 to j because you need to know j first) + 
101 * 51 * 26 * 1(typical latency for adding 1 to k because you need to know k first) + 101 * 52 * 1 
(check j<=i in total takes 1 cycle and happens 52 times in each of the 101 second for loops)
+ 101 * 51 * 6(adding 5 to x and storing it in x)
THis is about 1750000 clock cycles

9. 29 1/3 (from the usual stuff) + 1/3 (assignment i= 0) 101*1(typical latency for adding
1 to i because you need to know i first) + 102 * 1 (check i<=n in total takes 1 cycle and happens
102 times) + (101 + 101 * 51 + 101 * 51 * 26) * 2(cycle time for each of the jumps throughout everything) + 101 * 1/3 
(assignment j = 0) + 101 * 51 * 1(typical latency for adding 1 to j because you need to know j first) + 
101 * 51 * 26 * 1(typical latency for adding 1 to k because you need to know k first) + 101 * 52 * 1 
(check j<=i in total takes 1 cycle and happens 52 times in each of the 101 second for loops)
+ 101 * 51 * 6(adding 5 to x and storing it in x)
This is about 150000 clock cycles

10. The most important check here is going to come from the k = k*2 which will occur (i loop
101 times, average of the j's 50 times n where 2^n gives us n which I'll average to 4) times multiplication (5)
resulting in an estimate of about 101000 clock cycles
11. The most important check here is going to come from the j+=k which will occur (i loop
101 times, average the k loops times j loops to 50) resulting in an estimate of about
20000 clock cycles
