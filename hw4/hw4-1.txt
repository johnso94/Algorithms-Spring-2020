Part A:

1. We would have 10 times as many cycles
9760

2. This would have 10 times as many from the first loop
and 10 times as many from the second so we multiply by 100
349840

3. This is equal to the sum from 1 + 2 +... + n so it goes from
100(100+1)/2=5050 to 1000(1001)/2 = 500500 a ratio of about 99 so we multiply
by 99
5149584

4. This will be a ratio of 10 * 10 or 100
3637600

5. This will go from happening 8 times to 2 * (2+5+8+...+45+48)
for which there are 16 terms which comes out to 50 * 2 * 8 giving
a ratio of 100.
908800

6. This will have a ratio of 10 * 10 * 10
7107660000

7. After a bit of math, I found that the code inside of the k loop
will run 2/3 *(2n(n/2+1)n/4) times. For n = 100, this is 170000, and for
n = 1000, this is 167000000 which give a ratio of 982 compared to n = 100.
1,524,358,600
8. Assuming that the formula from 7 is still accurate we have a ratio of
982 again.
519,532,992

Part B:

1. This would take 1111 cycles since we would have 101 iterations of everything
and there are 11 cycles per iteration

2. This would take 88 cycles since we would have 8 iterations and there
are 11 cycles per iteration

3. This would take 300 cycles since we would have 5 iterations and there are
60 cycles per iteration

4. This would take 1063 since outside of the for loop we have 8 iterations and
59 cycles per iteration and the for loop adds (1 + 1 + 1)(100+50+25+12+6+3+1) cycles

5. This would take 55467 since outside of the for loop we have 8 iterations and
59 cycles per iteration and the j part, which dominates the for loop adds
3 cycles with (100*100/2(101)+50*50/2(51)+25*25/2(26)+12*12/2(13)+6*6/3(7)+3*3/2(4)+1)

6. This would take about 518033 cycles since it would be dominated by the what happens
in the k for loop which would take 9 cycles per run and would have
(100*50*100 + 33*16*33 + 11*5*11 + 2*1*2) iterations

7. This would take 160 cycles since it would take 10 cycles per iteration and have 16
iterations